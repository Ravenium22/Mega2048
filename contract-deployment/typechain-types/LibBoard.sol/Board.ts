/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BoardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOWN"
      | "LEFT"
      | "RIGHT"
      | "UP"
      | "getStartPosition"
      | "getTile"
      | "processMove(uint128,bool,bool)"
      | "processMove(uint128,uint8,uint256)"
      | "setTile"
      | "validateStartPosition"
      | "validateTransformation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DOWN", values?: undefined): string;
  encodeFunctionData(functionFragment: "LEFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "RIGHT", values?: undefined): string;
  encodeFunctionData(functionFragment: "UP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStartPosition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTile",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processMove(uint128,bool,bool)",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "processMove(uint128,uint8,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTile",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateStartPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransformation",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DOWN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LEFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RIGHT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStartPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMove(uint128,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMove(uint128,uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateStartPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransformation",
    data: BytesLike
  ): Result;
}

export interface Board extends BaseContract {
  connect(runner?: ContractRunner | null): Board;
  waitForDeployment(): Promise<this>;

  interface: BoardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOWN: TypedContractMethod<[], [bigint], "view">;

  LEFT: TypedContractMethod<[], [bigint], "view">;

  RIGHT: TypedContractMethod<[], [bigint], "view">;

  UP: TypedContractMethod<[], [bigint], "view">;

  getStartPosition: TypedContractMethod<[seed: BytesLike], [bigint], "view">;

  getTile: TypedContractMethod<
    [board: BigNumberish, pos: BigNumberish],
    [bigint],
    "view"
  >;

  "processMove(uint128,bool,bool)": TypedContractMethod<
    [board: BigNumberish, isVertical: boolean, isLeft: boolean],
    [bigint],
    "view"
  >;

  "processMove(uint128,uint8,uint256)": TypedContractMethod<
    [board: BigNumberish, move: BigNumberish, seed: BigNumberish],
    [bigint],
    "view"
  >;

  setTile: TypedContractMethod<
    [board: BigNumberish, pos: BigNumberish, value: BigNumberish],
    [bigint],
    "view"
  >;

  validateStartPosition: TypedContractMethod<
    [board: BigNumberish],
    [boolean],
    "view"
  >;

  validateTransformation: TypedContractMethod<
    [
      prevBoard: BigNumberish,
      move: BigNumberish,
      nextBoard: BigNumberish,
      seed: BigNumberish
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEFT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "UP"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStartPosition"
  ): TypedContractMethod<[seed: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTile"
  ): TypedContractMethod<
    [board: BigNumberish, pos: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "processMove(uint128,bool,bool)"
  ): TypedContractMethod<
    [board: BigNumberish, isVertical: boolean, isLeft: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "processMove(uint128,uint8,uint256)"
  ): TypedContractMethod<
    [board: BigNumberish, move: BigNumberish, seed: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setTile"
  ): TypedContractMethod<
    [board: BigNumberish, pos: BigNumberish, value: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateStartPosition"
  ): TypedContractMethod<[board: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "validateTransformation"
  ): TypedContractMethod<
    [
      prevBoard: BigNumberish,
      move: BigNumberish,
      nextBoard: BigNumberish,
      seed: BigNumberish
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
