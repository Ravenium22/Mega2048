/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MEGAETH2048Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateSeed"
      | "gameHashOf"
      | "getBoard"
      | "isMoveConfirmed"
      | "latestBoard"
      | "moveConfirmed"
      | "nextMove"
      | "play"
      | "startGame"
      | "state"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MoveConfirmed" | "NewGame" | "NewMove"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateSeed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameHashOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getBoard", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isMoveConfirmed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestBoard",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveConfirmed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextMove", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [
      BytesLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "calculateSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameHashOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMoveConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextMove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
}

export namespace MoveConfirmedEvent {
  export type InputTuple = [
    player: AddressLike,
    id: BytesLike,
    move: BigNumberish,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    id: string,
    move: bigint,
    blockNumber: bigint
  ];
  export interface OutputObject {
    player: string;
    id: string;
    move: bigint;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGameEvent {
  export type InputTuple = [
    player: AddressLike,
    id: BytesLike,
    board: BigNumberish
  ];
  export type OutputTuple = [player: string, id: string, board: bigint];
  export interface OutputObject {
    player: string;
    id: string;
    board: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMoveEvent {
  export type InputTuple = [
    player: AddressLike,
    id: BytesLike,
    move: BigNumberish,
    result: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    id: string,
    move: bigint,
    result: bigint
  ];
  export interface OutputObject {
    player: string;
    id: string;
    move: bigint;
    result: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MEGAETH2048 extends BaseContract {
  connect(runner?: ContractRunner | null): MEGAETH2048;
  waitForDeployment(): Promise<this>;

  interface: MEGAETH2048Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateSeed: TypedContractMethod<
    [gameId: BytesLike, moveNumber: BigNumberish],
    [bigint],
    "view"
  >;

  gameHashOf: TypedContractMethod<[gameHash: BytesLike], [string], "view">;

  getBoard: TypedContractMethod<
    [gameId: BytesLike],
    [[bigint[], bigint] & { boardArr: bigint[]; nextMoveNumber: bigint }],
    "view"
  >;

  isMoveConfirmed: TypedContractMethod<
    [gameId: BytesLike, moveNumber: BigNumberish],
    [boolean],
    "view"
  >;

  latestBoard: TypedContractMethod<[gameId: BytesLike], [bigint], "view">;

  moveConfirmed: TypedContractMethod<
    [gameId: BytesLike, moveNumber: BigNumberish],
    [boolean],
    "view"
  >;

  nextMove: TypedContractMethod<[gameId: BytesLike], [bigint], "view">;

  play: TypedContractMethod<
    [gameId: BytesLike, move: BigNumberish, resultBoard: BigNumberish],
    [void],
    "nonpayable"
  >;

  startGame: TypedContractMethod<
    [
      gameId: BytesLike,
      boards: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      moves: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<
    [gameId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        move: bigint;
        nextMove: bigint;
        board: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateSeed"
  ): TypedContractMethod<
    [gameId: BytesLike, moveNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameHashOf"
  ): TypedContractMethod<[gameHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getBoard"
  ): TypedContractMethod<
    [gameId: BytesLike],
    [[bigint[], bigint] & { boardArr: bigint[]; nextMoveNumber: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMoveConfirmed"
  ): TypedContractMethod<
    [gameId: BytesLike, moveNumber: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestBoard"
  ): TypedContractMethod<[gameId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "moveConfirmed"
  ): TypedContractMethod<
    [gameId: BytesLike, moveNumber: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextMove"
  ): TypedContractMethod<[gameId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "play"
  ): TypedContractMethod<
    [gameId: BytesLike, move: BigNumberish, resultBoard: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<
    [
      gameId: BytesLike,
      boards: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      moves: [BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<
    [gameId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        move: bigint;
        nextMove: bigint;
        board: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "MoveConfirmed"
  ): TypedContractEvent<
    MoveConfirmedEvent.InputTuple,
    MoveConfirmedEvent.OutputTuple,
    MoveConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "NewGame"
  ): TypedContractEvent<
    NewGameEvent.InputTuple,
    NewGameEvent.OutputTuple,
    NewGameEvent.OutputObject
  >;
  getEvent(
    key: "NewMove"
  ): TypedContractEvent<
    NewMoveEvent.InputTuple,
    NewMoveEvent.OutputTuple,
    NewMoveEvent.OutputObject
  >;

  filters: {
    "MoveConfirmed(address,bytes32,uint256,uint256)": TypedContractEvent<
      MoveConfirmedEvent.InputTuple,
      MoveConfirmedEvent.OutputTuple,
      MoveConfirmedEvent.OutputObject
    >;
    MoveConfirmed: TypedContractEvent<
      MoveConfirmedEvent.InputTuple,
      MoveConfirmedEvent.OutputTuple,
      MoveConfirmedEvent.OutputObject
    >;

    "NewGame(address,bytes32,uint256)": TypedContractEvent<
      NewGameEvent.InputTuple,
      NewGameEvent.OutputTuple,
      NewGameEvent.OutputObject
    >;
    NewGame: TypedContractEvent<
      NewGameEvent.InputTuple,
      NewGameEvent.OutputTuple,
      NewGameEvent.OutputObject
    >;

    "NewMove(address,bytes32,uint256,uint256)": TypedContractEvent<
      NewMoveEvent.InputTuple,
      NewMoveEvent.OutputTuple,
      NewMoveEvent.OutputObject
    >;
    NewMove: TypedContractEvent<
      NewMoveEvent.InputTuple,
      NewMoveEvent.OutputTuple,
      NewMoveEvent.OutputObject
    >;
  };
}
